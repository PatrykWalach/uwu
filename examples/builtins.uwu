
let js__console__log: Callable<@A, Unit> = `console.log`
let js__console__log2: Callable<@A, Callable<@B, Unit>> = `console.log`
let js__console__log_many: Callable<Array<@A>, Unit> = `console.log`

let js__number__to_string: Callable<Num, Str> = `(n)=>n.toString()`

let js__array__push: Callable<Array<@A>, Callable<@A, Num>> = `(arr)=>(v)=>arr.push(v)`
let js__array__length: Callable<Array<@B>, Num> = `(arr)=>arr.length`
let js__array__concat = `(a)=>(b)=>a.concat(b)`
let js__array__reduce = `(arr)=>(fn)=>(acc)=>arr.reduce((acc,v)=>fn(acc)(v),acc)`

let node__process__exit: Callable<Num, Unit> = 'process.exit'
let unit: Unit = 'undefined'


enum Option<V>{Some(V) None}
enum Bool{True False}
def id (x) do x end
